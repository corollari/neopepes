{"version":3,"sources":["components/footer/index.tsx","components/chapter-complete-card/index.tsx","components/lesson-progressbar/index.tsx","components/editor-control-panel/index.tsx","scilla.ts","components/editor-diff-viewer/index.tsx","components/editor-input/index.tsx","components/editor/index.tsx","components/instruction-viewer/index.tsx","components/lesson-navigator/index.tsx","components/cheat-sheet-modal/index.tsx","containers/lesson-container/index.tsx"],"names":["Footer","ChapterCompleteCard","t","total","chapter","navigate","isLast","className","data-testid","level","text","onClick","type","to","paths","chapterList","aria-label","LessonProgressbar","chapterNumber","lessonNumber","list","Array","from","length","percent","currentChapterText","multi","map","item","index","color","key","barClassName","bar","value","max","Progress","props","children","animated","striped","attributes","progressClasses","classNames","progressBarClasses","ProgressBar","style","width","role","aria-valuenow","aria-valuemin","aria-valuemax","ControlPanel","isAnswerVisible","showTryAgain","showAnswerButtonText","showAnswerButtonIcon","checkAnswerButtonText","checkAnswerButtonType","checkAnswerButtonIcon","warnableButtonType","before","handleCheckAnswer","size","hanldleToggle","href","target","rel","configuration","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","keywords","typeKeywords","operators","symbols","escapes","tokenizer","root","cases","include","token","log","bracket","next","comment","string","whitespace","DiffViewer","codeVisibleStyle","diffBorderStyle","titleStyle","height","original","codeForDiff","answerCode","options","readOnly","renderSideBySide","lineNumbers","EditorInput","editor","state","code","editorWillMount","monaco","languages","getLanguages","some","id","register","setMonarchTokensProvider","setLanguageConfiguration","e","preventDefault","getValue","toggleShowAnswer","undefined","checkAnswer","editorDidMount","focus","this","selectOnLineNumbers","roundedSelection","cursorStyle","automaticLayout","React","Component","EditorUI","isCorrect","isModalVisible","setState","showHint","cb","newState","compareAnswer","setTimeout","initializeState","window","scrollTo","submitted","answer","formatCode","split","line","lineStr","includes","former","slice","lastIndexOf","latter","replace","trim","join","initialCode","nextProps","pathname","onClose","textAlign","proceed","InstructionViewer","myRef","createRef","renderCode","overviewRulerBorder","hideCursorInOverviewRuler","occurrencesHighlight","scrollBeyondLastLine","minimap","enabled","node","current","scrollTop","ref","source","instruction","renderers","LessonNavigator","goNext","goBack","isBackButtonDisabled","isProceedButtonDisabled","disabled","after","CheatSheetModal","useState","isOpen","setIsOpen","padding","minWidth","scope","LessonContainer","codes","getChapterNumber","getChatperNumber","updateProgress","navigateToNextLesson","history","previousLessonPath","push","currentChapter","currentLesson","ch1Progress","newCh1Progress","setCh1Progress","chapterNum","lessonNum","getInstruction","instructions","lang","i18n","chapterIndex","lessonIndex","lessons","routeParams","match","params","parseInt","lesson","location","codeLessonList","numOfTotalChapter","numOfTotalLesson","isLastLesson","currentLessonText","documentTitle","Helmet","WithTranslation","withNamespaces","connect","course","courseInstructions","courseCodes","persist","dispatch","localProgress"],"mappings":"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M,CAAC,IAAK,MACzCC,iBAAkB,CAChB,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,MAEtBC,iBAAkB,CAChB,CAAEF,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,MAEtBE,QAAS,CACPC,QAAS,CACPC,MAAO,IAAIC,OAAO,0DAClBC,IAAK,IAAID,OAAO,mEAKTE,EAAW,CAGtBC,SAAU,CAER,OACA,QACA,QACA,OACA,MACA,MACA,MACA,KACA,UACA,SACA,SACA,SACA,SACA,OACA,OACA,OACA,aACA,OACA,UACA,UACA,QACA,aAGA,OACA,QACA,UACA,MACA,WACA,MACA,OACA,OACA,KACA,MACA,MACA,MACA,KACA,KACA,SACA,OACA,SACA,OACA,aACA,MACA,MACA,SACA,aACA,MACA,OAGA,YACA,YACA,WACA,YACA,UAGA,OACA,MACA,OACA,YACA,YACA,cACA,WACA,cACA,eACA,YACA,cACA,cACA,YACA,WACA,gBACA,aACA,cACA,WACA,eACA,iBACA,uBACA,WACA,WACA,eACA,SACA,aACA,uBACA,gBACA,gBACA,iBACA,eACA,eACA,gBACA,MACA,OAGFC,aAAc,CACZ,SACA,QACA,SACA,QACA,UACA,SACA,UACA,SACA,SACA,OACA,MACA,OACA,SACA,OACA,OACA,UACA,UACA,UACA,UACA,SAGFC,UAAW,CACT,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,QAIFC,QAAS,wBAGTC,QAAS,wEAGTC,UAAW,CACTC,KAAM,CAEJ,CACE,gBACA,CAAEC,MAAO,CAAE,gBAAiB,UAAW,YAAa,UAAW,WAAY,gBAE7E,CAAC,eAAgB,mBAGjB,CAAEC,QAAS,eAGX,CAAC,aAAc,aACf,CAAC,mBAAoB,aACrB,CAAC,WAAY,CAAED,MAAO,CAAE,aAAc,WAAY,WAAY,MAK9D,CAAC,yBAA0B,CAAEE,MAAO,aAAcC,IAAK,yBAGvD,CAAC,2BAA4B,gBAC7B,CAAC,oBAAqB,cACtB,CAAC,MAAO,UAGR,CAAC,QAAS,aAGV,CAAC,kBAAmB,kBACpB,CAAC,IAAK,CAAED,MAAO,eAAgBE,QAAS,QAASC,KAAM,YAGvD,CAAC,WAAY,UACb,CAAC,mBAAoB,CAAC,SAAU,gBAAiB,WACjD,CAAC,IAAK,mBAGRC,QAAS,CACP,CAAC,UAAW,WACZ,CAAC,OAAQ,UAAW,SACpB,CAAC,OAAQ,UAAW,QACpB,CAAC,QAAS,YAGZC,OAAQ,CACN,CAAC,UAAW,UACZ,CAAC,WAAY,iBACb,CAAC,MAAO,yBACR,CAAC,IAAK,CAAEL,MAAO,eAAgBE,QAAS,SAAUC,KAAM,UAG1DG,WAAY,CAAC,CAAC,aAAc,SAAU,CAAC,OAAQ,UAAW,YAAa,CAAC,UAAW,cCnNxEC,G,cA9BuB,SAAC9D,GACrC,IAOM+D,EAAmB/D,EAAMgB,gBAAkB,cAAgB,GAC3DgD,EAAkBhE,EAAMiB,aAAe,0BAA4B,mBACnEgD,EAAajE,EAAMiB,aAAe,cAAgB,iBAExD,OACE,yBAAK/C,UAAU,uBACb,0BAAMA,UAAW+F,GAAajE,EAAMnC,EAAE,gBACtC,yBAAKK,UAAW8F,GACd,yBAAK9F,UAAW6F,GACd,kBAAC,mBAAD,CACEG,OAAO,MACPrB,SAAS,SACTsB,SAAUnE,EAAMoE,YAChBvE,MAAOG,EAAMqE,WACbC,QArBW,CACnBC,UAAU,EACVC,kBAAkB,EAClBC,YAAa,cC6FFC,E,2MApFNC,Y,IACSC,MAAQ,CACtBC,KAAM,EAAK7E,MAAM6E,M,EA8CXC,gBAAkB,SAACC,GACzB,EAAKJ,OAASI,EACTA,EAAOC,UAAUC,eAAeC,MAAK,kBAAmB,WAAnB,EAAGC,QAE3CJ,EAAOC,UAAUI,SAAS,CAAED,GAAI,WAEhCJ,EAAOC,UAAUK,yBAAyB,SAAUxC,GAEpDkC,EAAOC,UAAUM,yBAAyB,SAAUvD,K,EAKhDJ,cAAgB,SAAC4D,GACvBA,EAAEC,iBACF,IAAMX,EAAO,EAAKF,OAAOc,WACzB,EAAKzF,MAAM0F,iBAAiBb,I,EAItBpD,kBAAoB,SAAC8D,GAE3B,GADAA,EAAEC,sBACkBG,IAAhB,EAAKhB,OAAT,CAGA,IAAME,EAAO,EAAKF,OAAOc,WACzB,EAAKzF,MAAM4F,YAAYf,K,EAGjBgB,eAAiB,SAAClB,GAExB,EAAKA,OAASA,EACdA,EAAOmB,S,wEA3EQ,IAAD,EACwDC,KAAK/F,MAAnEnC,EADM,EACNA,EAAGuG,EADG,EACHA,YAAaC,EADV,EACUA,WAAYrD,EADtB,EACsBA,gBAAiBC,EADvC,EACuCA,aAUrD,OACE,6BACE,yBAAK/C,UAAU,yBACb,kBAAC,IAAD,CACE2H,eAAgBE,KAAKF,eACrBvB,QAbQ,CACd0B,qBAAqB,EACrBC,kBAAkB,EAClB1B,UAAU,EACV2B,YAAa,OACbC,iBAAiB,GASXtG,MAAOkG,KAAK/F,MAAM6E,KAClBX,OAAO,MACPrB,SAAS,SACTiC,gBAAiBiB,KAAKjB,mBAG1B,kBAAC,EAAD,CACEjH,EAAGA,EACHuG,YAAaA,EACbC,WAAYA,EACZrD,gBAAiBA,EACjBC,aAAcA,IAEhB,yBAAK/C,UAAU,eACb,kBAAC,EAAD,CACEL,EAAGA,EACH8D,cAAeoE,KAAKpE,cACpBF,kBAAmBsE,KAAKtE,kBACxBT,gBAAiBA,EACjBC,aAAcA,U,GA1CAmF,IAAMC,WCDXC,E,2MACH1B,MAAgB,CAC9BC,KAAM,GACNT,YAAa,EAAKpE,MAAMqE,WACxBkC,WAAW,EACXvF,iBAAiB,EACjBwF,gBAAgB,EAChBvF,cAAc,G,EA8ETyE,iBAAmB,SAACb,GACzB,EAAK4B,SAAS,CAAEzF,iBAAkB,EAAK4D,MAAM5D,gBAAiB6D,U,EAIzD6B,SAAW,SAACtC,EAAqBuC,GACtC,EAAKF,SAAS,CAAE5B,KAAMT,EAAaA,eAAeuC,I,EAI7Cf,YAAc,SAACf,GAAwB,IACpCR,EAAe,EAAKrE,MAApBqE,WAEFuC,EAAW,CACf/B,OACAT,YAAaS,GAGf,GANkB,EAAKgC,cAAchC,EAAMR,GAOzC,EAAKoC,SAAL,aACED,gBAAgB,EAChBD,WAAW,EACXtF,cAAc,GACX2F,QAEA,CAEL,EAAKH,SAAL,aAEIxF,cAAc,GACX2F,IAJI,kBAAME,YAAW,kBAAM,EAAKL,SAAS,CAAExF,cAAc,MAAU,U,EAWtE8F,gBAAkB,SAACH,GAGzB,EAAKH,SAASG,GADM,kBAAMI,OAAOC,SAAS,EAAG,O,EAKvCJ,cAAgB,SAACK,EAAmBC,GAG1C,OADkB,EAAKC,WAAWF,KAAe,EAAKE,WAAWD,I,EAI3DC,WAAa,SAACvC,GACpB,OAAOA,EACJwC,MAAM,MACN/H,KAAI,SAACgI,GACJ,IAAIC,EAAkBD,EACtB,GAAIC,EAAQC,SAAS,OAASD,EAAQC,SAAS,MAAO,CACpD,IAAMC,EAASF,EAAQG,MAAM,EAAGH,EAAQI,YAAY,OAC9CC,EAASL,EAAQG,MAAMH,EAAQI,YAAY,MAAQ,EAAGJ,EAAQrI,QACpEqI,EAAUE,EAASG,EAErB,OAAOL,EAAQM,QAAQ,SAAU,KAAKC,UAEvCC,KAAK,MACLF,QAAQ,YAAa,KACrBA,QAAQ,SAAU,KAClBC,Q,mFA3IH/B,KAAKU,SAAS,CAAE5B,KAAMkB,KAAK/F,MAAMgI,gB,gDAGFC,GAK/B,GAJqBA,EAAUC,WACPnC,KAAK/F,MAAMkI,SAGG,CACpC,IAAMtB,EAAW,CACf/B,KAAMoD,EAAUD,YAChB5D,YAAa6D,EAAU5D,WACvBrD,iBAAiB,EACjBwF,gBAAgB,EAChBD,WAAW,EACXtF,cAAc,GAEhB8E,KAAKgB,gBAAgBH,M,+BAIS,IAAD,SACLb,KAAK/F,MAAvBnC,EADuB,EACvBA,EAAGwG,EADoB,EACpBA,WADoB,EAS3B0B,KAAKnB,MANPC,EAH6B,EAG7BA,KACAT,EAJ6B,EAI7BA,YACApD,EAL6B,EAK7BA,gBACAuF,EAN6B,EAM7BA,UACAtF,EAP6B,EAO7BA,aACAuF,EAR6B,EAQ7BA,eAGF,OACE,6BACE,yBAAKrI,cAAY,yBACdqI,EACC,kBAAC,QAAD,CAAO2B,QAAS,kBAAM,EAAK1B,SAAS,CAAED,gBAAgB,MACpD,yBAAK/F,MAAO,CAAE2H,UAAW,WACvB,4BACE,kBAAC,IAAD,MADF,IACevK,EAAE,oBAEjB,6BACA,6BAAMA,EAAE,kCACR,6BACA,6BACE,kBAAC,SAAD,CACEO,MAAM,UACNC,KAAMR,EAAE,qBACRS,QAASyH,KAAK/F,MAAMqI,QACpB9J,KAAK,SACLmD,KAAK,aAKX,MAGN,kBAAC,EAAD,CACEmD,KAAMA,EACNR,WAAYkC,EAAY1B,EAAOR,EAC/BD,YAAaA,EACbwB,YAAaG,KAAKH,YAClBc,SAAUX,KAAKW,SACfhB,iBAAkBK,KAAKL,iBACvB1E,gBAAiBA,EACjBC,aAAcA,EACdpD,EAAGA,S,GA9EyBuI,IAAMC,W,kBC6C7BiC,G,kNAzDN3D,Y,IACC4D,MAAQnC,IAAMoC,Y,EAgBd1D,gBAAkB,SAACC,GACzB,EAAKJ,OAASI,EACTA,EAAOC,UAAUC,eAAeC,MAAK,kBAAmB,WAAnB,EAAGC,QAE3CJ,EAAOC,UAAUI,SAAS,CAAED,GAAI,WAEhCJ,EAAOC,UAAUK,yBAAyB,SAAUxC,GAEpDkC,EAAOC,UAAUM,yBAAyB,SAAUvD,K,EAIhD0G,WAAa,SAACzI,GAepB,OACE,yBAAK9B,UAAU,0BACb,kBAAC,IAAD,CACEgG,OAAyC,GAAjClE,EAAMH,MAAMwH,MAAM,MAAMnI,OAChC2D,SAAS,SACThD,MAAOG,EAAMH,MACbyE,QApBe,CACnBC,UAAU,EACVE,YAAa,MACbiE,qBAAqB,EACrBC,2BAA2B,EAC3BC,sBAAsB,EACtBC,sBAAsB,EACtBC,QAAS,CACPC,SAAS,IAaPjE,gBAAiB,EAAKA,oB,yFAjDGmD,GAC/B,IAAMe,EAAOjD,KAAKwC,MAAMU,QACpBD,IACFA,EAAKE,UAAY,K,+BAKnB,OACE,yBAAKC,IAAKpD,KAAKwC,MAAOrK,UAAU,gCAC9B,kBAAC,IAAD,CAAekL,OAAQrD,KAAK/F,MAAMqJ,YAAaC,UAAW,CAAEzE,KAAMkB,KAAK0C,mB,GAb/CrC,IAAMC,YCiCvBkD,EA/B4B,SAACvJ,GAAW,IAC7CnC,EAA2CmC,EAA3CnC,EAAG2L,EAAwCxJ,EAAxCwJ,OAAQC,EAAgCzJ,EAAhCyJ,OAAQ3K,EAAwBkB,EAAxBlB,aAErB4K,EAAuB5K,GAAgB,EACvC6K,EAA0B7K,GAHmBkB,EAAVlC,MAKzC,OACE,yBAAK6C,KAAK,QAAQzC,UAAU,YAAYC,cAAY,oBAClD,kBAAC,SAAD,CACEC,MAAM,YACNsD,KAAK,QACLrD,KAAMR,EAAE,eACRS,QAASmL,EACTG,SAAUF,EACVlI,OAAQ,kBAAC,IAAD,MACRjD,KAAK,WAGP,kBAAC,SAAD,CACEH,MAAM,YACNsD,KAAK,QACLrD,KAAMR,EAAE,eACRS,QAASkL,EACTI,SAAUD,EACVE,MAAO,kBAAC,IAAD,MACPtL,KAAK,a,QCqPEuL,G,OArRS,SAAC,GAAW,IAATjM,EAAQ,EAARA,EAAQ,EACLkM,oBAAS,GADJ,mBAC1BC,EAD0B,KAClBC,EADkB,KAEjC,OACE,0BAAM9L,cAAY,qBAChB,kBAAC,SAAD,CACEG,QAAS,kBAAM2L,GAAU,IACzB7L,MAAM,YACND,cAAY,SACZuD,KAAK,QACLrD,KAAMR,EAAE,qBACR2D,OAAQ,kBAAC,IAAD,MACRjD,KAAK,WAENyL,EACC,kBAAC,QAAD,CAAO7B,QAAS,kBAAM8B,GAAU,KAC9B,4BAAKpM,EAAE,sBACP,6BACA,yBAAKK,UAAU,oBAAoBuC,MAAO,CAAEyJ,QAAS,WACnD,2BAAOhM,UAAU,iCACf,+BACE,4BACE,wBAAIuC,MAAO,CAAE0J,SAAU,MAAvB,cACA,wBAAI1J,MAAO,CAAE0J,SAAU,MAAvB,sBACqB,6BADrB,oBAIA,wBAAI1J,MAAO,CAAE0J,SAAU,MAAvB,2BAC0B,6BAD1B,mBAIA,wBAAI1J,MAAO,CAAE0J,SAAU,MAAvB,2BAC0B,6BAD1B,cAIA,wBAAI1J,MAAO,CAAE0J,SAAU,MAAvB,2CACA,wBAAI1J,MAAO,CAAE0J,SAAU,MAAvB,gCAGJ,+BACE,4BACE,wBAAIC,MAAM,OACR,uBACExI,KAAM,sEACNC,OAAO,SACPC,IAAI,sBACJnD,aAAY,kBAJd,mBASF,mCAEE,6BAFF,kDAKA,4BAAK,wCACL,4BAAK,4BACL,4BAAK,eACL,4BAAK,mBAEP,4BACE,wBAAIyL,MAAM,OACR,uBACExI,KAAM,sEACNC,OAAO,SACPC,IAAI,sBACJnD,aAAY,oBAJd,qBASF,oCAEE,6BAFF,mDAKA,4BAAK,0CACL,4BAAK,+BACL,4BAAK,gBACL,4BAAK,qBAEP,4BACE,wBAAIyL,MAAM,OACR,uBACExI,KAAM,sEACNC,OAAO,SACPC,IAAI,sBACJnD,aAAY,UAJd,WASF,4BAAK,UACL,4BAAK,yBACL,4BAAK,8BACL,4BAAK,eACL,4BAAK,kBAEP,4BACE,wBAAIyL,MAAM,OACR,uBACExI,KAAM,sEACNC,OAAO,SACPC,IAAI,sBACJnD,aAAY,QAJd,SASF,uCACA,4BAAK,4CACL,4BAAK,qCACL,4BAAK,sBACL,4BAAK,2BAEP,4BACE,wBAAIyL,MAAM,OACR,uBACExI,KAAM,sEACNC,OAAO,SACPC,IAAI,sBACJnD,aAAY,WAJd,YASF,uCACA,4BAAK,4CACL,4BAAK,qCACL,4BAAK,qBACL,4BAAK,2BAEP,4BACE,wBAAIyL,MAAM,OACR,uBACExI,KAAM,sEACNC,OAAO,SACPC,IAAI,sBACJnD,aAAY,gBAJd,iBASF,oCACA,4BAAK,uCACL,4BAAK,2BACL,4BAAK,cACL,4BAAK,mBAEP,4BACE,wBAAIyL,MAAM,OACR,uBACExI,KAAM,sEACNC,OAAO,SACPC,IAAI,sBACJnD,aAAY,WAJd,YASF,oCACA,4BAAK,uCACL,4BAAK,yBACL,4BAAK,YACL,4BAAK,iBAEP,4BACE,wBAAIyL,MAAM,OACR,uBACExI,KAAM,sEACNC,OAAO,SACPC,IAAI,sBACJnD,aAAY,QAJd,SASF,oCACA,4BAAK,qCACL,kFAEE,6BAFF,sCAIE,6BAJF,2CAOA,4BAAK,mBACL,4BAAK,wBAEP,4BACE,wBAAIyL,MAAM,OACR,uBACExI,KAAM,sEACNC,OAAO,SACPC,IAAI,sBACJnD,aAAY,QAJd,SASF,8DACA,uEAC0C,6BAD1C,iCAGE,6BAHF,mDAIE,6BAJF,+DAMA,gEACmC,6BADnC,sCAGE,6BAHF,gDAIE,6BAJF,wDAMA,oDAEE,6BAFF,gDAGE,6BAHF,wDAKA,wDAEE,6BAFF,gDAGE,6BAHF,yDAMF,4BACE,wBAAIyL,MAAM,OACR,uBACExI,KAAM,sEACNC,OAAO,SACPC,IAAI,sBACJnD,aAAY,OAJd,QASF,qEAEE,6BACA,6BAHF,uCAG4C,6BAC1C,4BACE,oCACA,qCACA,sCACA,uCACA,wCATJ,8BAaA,4BAAK,kEACL,0FAEE,6BAFF,8CAGE,6BAHF,yCAIE,6BAJF,yCAMA,gEAEE,6BAFF,8CAGE,6BAHF,yCAIE,6BAJF,yCAMA,oEAEE,6BAFF,8CAGE,6BAHF,yCAIE,6BAJF,8CAWR,QChPJ0L,E,2MAoFGb,OAAS,WAGd,QAAc7D,IAFI,EAAK3F,MAAfsK,MAER,CAGA,IAAMzL,EAAwB,EAAK0L,mBAC7BzL,EAAuB,EAAK0L,mBAElC,EAAKC,eAAe5L,EAAeC,GACnC,EAAK4L,qBAAqB7L,EAAeC,K,EAGnC2K,OAAS,WAAa,IACpBkB,EAAY,EAAK3K,MAAjB2K,QACF9L,EAAwB,EAAK0L,mBAC7BzL,EAAuB,EAAK0L,mBAC5BI,EAAkB,mBAAe/L,EAAf,mBAAuCC,EAAe,GAC9E6L,EAAQE,KAAKD,I,EAGPH,eAAiB,SAACK,EAAwBC,GAA2B,IACnEC,EAAgB,EAAKhL,MAArBgL,YAERA,EAAYF,EAAiB,GAAKC,EAClC,IAAIE,EAAiBD,EACrB,EAAKhL,MAAMkL,eAAeD,I,EAGpBP,qBAAuB,SAACI,EAAwBC,QAIxCpF,IAHI,EAAK3F,MAAfsK,OAOR,EAAKtM,SAAS8M,EAAgBC,EAAgB,I,EAGxC/M,SAAW,SAACmN,EAAYC,GACV,EAAKpL,MAAjB2K,QAEAE,KAAR,mBAAyBM,EAAzB,mBAA8CC,K,EAGxCC,eAAiB,WAAO,IAAD,EACE,EAAKrL,MAA5BsL,EADqB,EACrBA,aACFC,EAFuB,EACPC,KACI3I,SAGpB4I,EADgB,EAAKlB,mBACU,EAE/BmB,EADe,EAAKlB,mBACS,EAQnC,QAN6Bc,EAAaC,GACLE,IAAiB,IAEhBE,SAAW,IACPD,IAAgB,I,EAKpDnB,iBAAmB,WAAe,IAElCqB,EADY,EAAK5L,MAAf6L,MACkBC,OAC1B,OAAOC,SAASH,EAAY7N,QAAS,K,EAG/ByM,iBAAmB,WAAe,IAElCoB,EADY,EAAK5L,MAAf6L,MACkBC,OAC1B,OAAOC,SAASH,EAAYI,OAAQ,K,wEA5JJ,IAAD,EACAjG,KAAK/F,MAA5BsK,EADuB,EACvBA,MAAO2B,EADgB,EAChBA,SAAUpO,EADM,EACNA,EAEnBgB,EAAwBkH,KAAKwE,mBAC7BkB,EAAuB5M,EAAgB,EACvCC,EAAuBiH,KAAKyE,mBAC5BkB,EAAsB5M,EAAe,EACrCuK,EAActD,KAAKsF,iBAEnBa,EAAiB5B,EAAMmB,IAAiB,GAExCU,EAA4B7B,EAAMpL,OAElCkN,EAA2BF,EAAehN,QAAU,EAGpDmN,EAAwBvN,IAAiBsN,EAEzCvH,EAAOqH,EAAeR,IAAgB,CAAE1D,iBAAarC,EAAWtB,gBAAYsB,GAC1EqC,EAA4BnD,EAA5BmD,YAAa3D,EAAeQ,EAAfR,WAEfjF,EAAkB,UAAMvB,EAAE,mBAAR,YAA8BgB,GAChDyN,EAAiB,UAAMzO,EAAE,iBAAR,YAA4BiB,GAC7CyN,EAAqB,qBAAiBnN,EAAjB,YAAuCkN,GAE1DpE,EAAa+D,EAAb/D,SACR,OACE,6BACE,kBAAC,IAAWnC,KAAK/F,OACjB,kBAACwM,EAAA,OAAD,KACE,+BAAQD,IAEV,yBAAKrO,UAAU,aACb,kBAAC,EAAD,CACEF,SAAU+H,KAAK/H,SACfa,cAAeA,EACfC,aAAcA,EACdhB,MAAOsO,EACPvO,EAAGA,IAEL,yBAAKK,UAAU,SAEf,yBAAKA,UAAU,OACb,yBAAKA,UAAU,0CACb,kBAAC,EAAD,CAAmBmL,YAAaA,KAElC,yBAAKnL,UAAU,0CACZmO,EACC,kBAAC,EAAD,CACErO,SAAU+H,KAAK/H,SACfH,EAAGA,EACHC,MAAOqO,EACPpO,QAASc,IAGX,kBAAC,EAAD,CACEmJ,YAAaA,EACb3D,WAAYA,EACZxG,EAAGA,EACHwK,QAAStC,KAAKyD,OACdtB,SAAUA,MAKlB,yBAAKhK,UAAU,eACb,yBAAKA,UAAU,uCACb,kBAAC,EAAD,CAAiBL,EAAGA,IACpB,kBAAC,EAAD,CACE4L,OAAQ1D,KAAK0D,OACbD,OAAQzD,KAAKyD,OACb1K,aAAcA,EACdhB,MAAOsO,EACPvO,EAAGA,OAKX,kBAAC,IAAD,W,GA/EsBuI,IAAMC,WAkK9BoG,EAAkBC,cAAiBrC,GAY1BsC,uBAVS,SAAC/H,GAAD,MAAY,CAClC0G,aAAc1G,EAAMgI,OAAOC,mBAC3BvC,MAAO1F,EAAMgI,OAAOE,YACpB9B,YAAapG,EAAMmI,QAAQ/B,gBAGF,SAACgC,GAAD,MAAe,CACxC9B,eAAgB,SAAC+B,GAAD,OAAmBD,EAAS9B,YAAe+B,QAG9CN,CAGbF","file":"static/js/4.a78d2da2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Footer: React.SFC = () => null;\n\nexport default Footer;\n","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { paths } from '../../routes';\nimport './style.css';\nimport { Button } from 'react-fn-components';\n\ninterface IProps {\n  t: (key: string) => string;\n  total: number;\n  chapter: number;\n  navigate: (chapterNum: number, lessonNum: number) => void;\n}\n\nconst ChapterCompleteCard: FunctionComponent<IProps> = ({ t, total, chapter, navigate }) => {\n  // Check if the current chapter is the last one.\n  const isLast: boolean = chapter === total;\n\n  return (\n    <div\n      className=\"chapter-complete-card card card-body text-center py-5\"\n      data-testid=\"chapter-complete-card\"\n    >\n      <div className=\"text-secondary\">\n        <h3>{t('chapter.goodjob')}!</h3>\n        <p>{t('chapter.chapterCompleteMessage')}</p>\n        <br />\n        <div>\n          {isLast ? null : (\n            <Button\n              level=\"primary\"\n              text={t('lesson.nextLesson')}\n              onClick={() => navigate(chapter + 1, 1)}\n              type=\"button\"\n            />\n          )}\n        </div>\n        <br />\n        <Link to={paths.chapterList} aria-label={'table of contents'}>\n          {t('link.tableOfContents')}\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default ChapterCompleteCard;\n","import React from 'react';\n\nimport './style.css';\nimport classNames from 'classnames';\n\ninterface IProps {\n  lessonNumber: number;\n  chapterNumber: number;\n  total: number;\n  t: (key: string) => string;\n  navigate: (chapterNum: number, lessonNum: number) => void;\n}\n\n// Renders step progressbar dynamically\nconst LessonProgressbar: React.SFC<IProps> = ({\n  t,\n  navigate,\n  chapterNumber,\n  lessonNumber,\n  total\n}) => {\n  // initialized array with the given total number\n  const list = Array.from({ length: total });\n  const percent = (1 / total) * 100;\n  const currentChapterText = `${t('chapter.chapter')} ${chapterNumber}`;\n  return (\n    <div className=\"text-center\">\n      <div className=\"py-2\">\n        <span>{currentChapterText}</span>\n      </div>\n      <Progress\n        multi={true}\n        className=\"lesson-progress-bar-container\"\n        data-testid=\"lesson-progressbar\"\n      >\n        {list.map((item, index) => {\n          const isLocked = lessonNumber <= index;\n          const color = isLocked ? 'secondary' : 'primary';\n          return (\n            <Progress\n              data-testid={`lesson-progressbar-block${index}`}\n              key={index}\n              onClick={() => navigate(chapterNumber, index + 1)}\n              barClassName={`lesson-progress-bar cursor-pointer`}\n              bar={true}\n              color={color}\n              value={percent}\n              max={total}\n            />\n          );\n        })}\n      </Progress>\n    </div>\n  );\n};\n\nexport default LessonProgressbar;\n\ninterface IProgressProps {\n  onClick?: () => void;\n  children?: any;\n  bar?: boolean;\n  multi?: boolean;\n  value?: number;\n  max?: number;\n  animated?: boolean;\n  striped?: boolean;\n  color?: string;\n  className?: string;\n  barClassName?: string;\n}\n\nconst Progress = (props: IProgressProps) => {\n  const {\n    children,\n    className,\n    barClassName,\n    value = 0,\n    max = 100,\n    animated,\n    striped,\n    color,\n    bar,\n    multi,\n    onClick,\n    ...attributes\n  } = props;\n\n  const percent = (value / max) * 100;\n  const progressClasses = classNames(className, 'progress');\n\n  const progressBarClasses = classNames(\n    'progress-bar',\n    bar ? className || barClassName : barClassName,\n    animated ? 'progress-bar-animated' : null,\n    color ? `bg-${color}` : null,\n    striped || animated ? 'progress-bar-striped' : null\n  );\n\n  const ProgressBar = multi ? (\n    children\n  ) : (\n    <div\n      className={progressBarClasses}\n      style={{ width: `${percent}%` }}\n      role=\"progressbar\"\n      onClick={onClick}\n      aria-valuenow={value}\n      aria-valuemin={0}\n      aria-valuemax={max}\n      children={children}\n    />\n  );\n\n  if (bar) {\n    return ProgressBar;\n  }\n\n  return <div {...attributes} className={progressClasses} children={ProgressBar} />;\n};\n","import React from 'react';\nimport { Button } from 'react-fn-components';\nimport './style.css';\n\nimport { FaCheck, FaRegEye, FaRegEyeSlash, FaRegComments, FaTimes } from 'react-icons/fa';\ninterface IProps {\n  t: (key: string) => string;\n  isAnswerVisible: boolean;\n  showTryAgain: boolean;\n\n  handleCheckAnswer: (e) => void;\n  hanldleToggle: (e) => void;\n}\n\nconst ControlPanel: React.SFC<IProps> = (props) => {\n  const { isAnswerVisible, showTryAgain, t } = props;\n  const showAnswerButtonText = t(isAnswerVisible ? 'editor.hideAnswer' : 'editor.showAnswer');\n  const showAnswerButtonIcon = isAnswerVisible ? <FaRegEyeSlash /> : <FaRegEye />;\n\n  const checkAnswerButtonText = t(showTryAgain ? 'editor.tryAgain' : 'editor.checkAnswer');\n  const checkAnswerButtonType = showTryAgain ? 'danger' : 'primary';\n  const checkAnswerButtonIcon = showTryAgain ? <FaTimes /> : <FaCheck />;\n\n  const warnableButtonType = showTryAgain ? 'warning' : 'secondary';\n\n  return (\n    <div className=\"py-2 wrapper\">\n      <Button\n        level=\"primary\"\n        className={`type-${checkAnswerButtonType}`}\n        text={checkAnswerButtonText}\n        before={checkAnswerButtonIcon}\n        onClick={props.handleCheckAnswer}\n        size=\"small\"\n        type=\"button\"\n      />{' '}\n      <Button\n        level={'secondary'}\n        text={showAnswerButtonText}\n        before={showAnswerButtonIcon}\n        onClick={props.hanldleToggle}\n        size=\"small\"\n        type=\"button\"\n      />{' '}\n      <a\n        className={`btn btn-sm type-${warnableButtonType}`}\n        href={'https://gitter.im/Zilliqa/SmartContract'}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        aria-label={'open chat'}\n      >\n        <FaRegComments /> {t('lesson.openChat')}\n      </a>{' '}\n    </div>\n  );\n};\n\nexport default ControlPanel;\n","/* eslint-disable */\n\nexport const configuration = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['(*', '*)']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' }\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp('^\\\\s*//\\\\s*#region\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#region(.*)\\\\*\\\\)'),\n      end: new RegExp('^\\\\s*//\\\\s*#endregion\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#endregion\\\\s*\\\\*\\\\)')\n    }\n  }\n};\n\nexport const language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  // defaultToken: 'invalid',\n  keywords: [\n    // Keyword\n    'send',\n    'event',\n    'match',\n    'with',\n    'end',\n    'fun',\n    'let',\n    'in',\n    'builtin',\n    'accept',\n    'import',\n    'delete',\n    'exists',\n    'Some',\n    'None',\n    '_tag',\n    '_eventname',\n    'Main',\n    '_sender',\n    '_amount',\n    'field',\n    '_recipient',\n\n    // Constant\n    'True',\n    'False',\n    'library',\n    'Emp',\n    'contract',\n    'Nil',\n    'Zero',\n    'Succ',\n    'eq',\n    'add',\n    'sub',\n    'mul',\n    'lt',\n    'eq',\n    'concat',\n    'Cons',\n    'substr',\n    'dist',\n    'sha256hash',\n    'put',\n    'get',\n    'remove',\n    'contains[]',\n    'blt',\n    'badd',\n\n    // Stdlib\n    'ListUtils',\n    'BoolUtils',\n    'NatUtils',\n    'PairUtils',\n    'Schnorr',\n\n    // StdlibMethods\n    'andb',\n    'orb',\n    'negb',\n    'list_head',\n    'list_tail',\n    'list_filter',\n    'list_map',\n    'list_append',\n    'list_reverse',\n    'list_sort',\n    'list_exists',\n    'list_forall',\n    'list_find',\n    'list_zip',\n    'list_zip_with',\n    'list_unzip',\n    'list_to_map',\n    'list_nth',\n    'schnorr_sign',\n    'schnorr_verify',\n    'schnorr_gen_key_pair',\n    'to_bystr',\n    'nat_prev',\n    'is_some_zero',\n    'nat_eq',\n    'nat_to_int',\n    'uint32_to_nat_helper',\n    'uint32_to_nat',\n    'uint64_to_nat',\n    'uint128_to_nat',\n    'int32_to_nat',\n    'int64_to_nat',\n    'int128_to_nat',\n    'fst',\n    'snd'\n  ],\n\n  typeKeywords: [\n    'Uint32',\n    'Int32',\n    'Uint64',\n    'Int64',\n    'Uint128',\n    'Int128',\n    'Uint256',\n    'Int256',\n    'String',\n    'Bool',\n    'Map',\n    'BNum',\n    'Option',\n    'List',\n    'Pair',\n    'Message',\n    'ByStr20',\n    'ByStr32',\n    'ByStr64',\n    'ByStr'\n  ],\n\n  operators: [\n    '=',\n    '>',\n    '<',\n    '!',\n    '~',\n    '?',\n    ':',\n    '==',\n    '<=',\n    '>=',\n    '!=',\n    '&&',\n    '||',\n    '++',\n    '--',\n    '+',\n    '-',\n    '*',\n    '/',\n    '&',\n    '|',\n    '^',\n    '%',\n    '<<',\n    '>>',\n    '>>>',\n    '+=',\n    '-=',\n    '*=',\n    '/=',\n    '&=',\n    '|=',\n    '^=',\n    '%=',\n    '<<=',\n    '>>=',\n    '>>>='\n  ],\n\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\n  // C# style strings\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // identifiers and keywords\n      [\n        /[a-z_$][\\w$]*/,\n        { cases: { '@typeKeywords': 'keyword', '@keywords': 'keyword', '@default': 'identifier' } }\n      ],\n      [/[A-Z][\\w\\$]*/, 'type.identifier'], // to show class names nicely\n\n      // whitespace\n      { include: '@whitespace' },\n\n      // delimiters and operators\n      [/[{}()\\[\\]]/, '@brackets'],\n      [/[<>](?!@symbols)/, '@brackets'],\n      [/@symbols/, { cases: { '@operators': 'operator', '@default': '' } }],\n\n      // @ annotations.\n      // As an example, we emit a debugging log message on these tokens.\n      // Note: message are supressed during the first load -- change some lines to see them.\n      [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, { token: 'annotation', log: 'annotation token: $0' }],\n\n      // numbers\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n      [/0[xX][0-9a-fA-F]+/, 'number.hex'],\n      [/\\d+/, 'number'],\n\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, 'delimiter'],\n\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\n\n      // characters\n      [/'[^\\\\']'/, 'string'],\n      [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n      [/'/, 'string.invalid']\n    ],\n\n    comment: [\n      [/[^\\(*]+/, 'comment'],\n      [/\\(\\*/, 'comment', '@push'], // nested comment\n      [/\\*\\)/, 'comment', '@pop'],\n      [/[\\(*]/, 'comment']\n    ],\n\n    string: [\n      [/[^\\\\\"]+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n    ],\n\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/\\(\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']]\n  }\n};\n","import React from 'react';\nimport { MonacoDiffEditor } from 'react-monaco-editor';\nimport './style.css';\n\ninterface IProps {\n  isAnswerVisible: boolean;\n  showTryAgain: boolean;\n  codeForDiff: string;\n  answerCode: string;\n  t: (key: string) => string;\n}\n\nconst DiffViewer: React.SFC<IProps> = (props) => {\n  const options: any = {\n    readOnly: true,\n    renderSideBySide: false,\n    lineNumbers: 'off'\n  };\n\n  // This className decide code visibility\n  const codeVisibleStyle = props.isAnswerVisible ? 'show-answer' : '';\n  const diffBorderStyle = props.showTryAgain ? 'code-diff-border-active' : 'code-diff-border';\n  const titleStyle = props.showTryAgain ? 'text-danger' : 'text-secondary';\n\n  return (\n    <div className=\"code-diff-container\">\n      <span className={titleStyle}>{props.t('editor.hint')}</span>\n      <div className={diffBorderStyle}>\n        <div className={codeVisibleStyle}>\n          <MonacoDiffEditor\n            height=\"150\"\n            language=\"scilla\"\n            original={props.codeForDiff}\n            value={props.answerCode}\n            options={options}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DiffViewer;\n","import React from 'react';\nimport MonacoEditor from 'react-monaco-editor';\nimport ControlPanel from '../editor-control-panel';\nimport { language, configuration } from '../../scilla';\nimport './style.css';\nimport DiffViewer from '../editor-diff-viewer';\n\ninterface IProps {\n  t: (key: string) => string;\n  code: string;\n  codeForDiff: string;\n  answerCode: string;\n  showHint: (code: string, cb?) => void;\n  isAnswerVisible: boolean;\n  showTryAgain: boolean;\n  toggleShowAnswer: (code: string) => void;\n  checkAnswer: (code: string) => void;\n}\n\ninterface IState {\n  code: string;\n}\n\n// Renders code editor\nclass EditorInput extends React.Component<IProps, IState> {\n  public editor;\n  public readonly state = {\n    code: this.props.code\n  };\n\n  public render() {\n    const { t, codeForDiff, answerCode, isAnswerVisible, showTryAgain } = this.props;\n\n    const options = {\n      selectOnLineNumbers: true,\n      roundedSelection: false,\n      readOnly: false,\n      cursorStyle: 'line',\n      automaticLayout: false\n    };\n\n    return (\n      <div>\n        <div className=\"code-editor-container\">\n          <MonacoEditor\n            editorDidMount={this.editorDidMount}\n            options={options}\n            value={this.props.code}\n            height=\"300\"\n            language=\"scilla\"\n            editorWillMount={this.editorWillMount}\n          />\n        </div>\n        <DiffViewer\n          t={t}\n          codeForDiff={codeForDiff}\n          answerCode={answerCode}\n          isAnswerVisible={isAnswerVisible}\n          showTryAgain={showTryAgain}\n        />\n        <div className=\"text-center\">\n          <ControlPanel\n            t={t}\n            hanldleToggle={this.hanldleToggle}\n            handleCheckAnswer={this.handleCheckAnswer}\n            isAnswerVisible={isAnswerVisible}\n            showTryAgain={showTryAgain}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  private editorWillMount = (monaco) => {\n    this.editor = monaco;\n    if (!monaco.languages.getLanguages().some(({ id }) => id === 'scilla')) {\n      // Register a new language\n      monaco.languages.register({ id: 'scilla' });\n      // Register a tokens provider for the language\n      monaco.languages.setMonarchTokensProvider('scilla', language);\n      // Set the editing configuration for the language\n      monaco.languages.setLanguageConfiguration('scilla', configuration);\n    }\n  };\n\n  // Handles event to control the visibility of answer\n  private hanldleToggle = (e) => {\n    e.preventDefault();\n    const code = this.editor.getValue();\n    this.props.toggleShowAnswer(code);\n  };\n\n  // Handles event to check answer\n  private handleCheckAnswer = (e) => {\n    e.preventDefault();\n    if (this.editor === undefined) {\n      return;\n    }\n    const code = this.editor.getValue();\n    this.props.checkAnswer(code);\n  };\n\n  private editorDidMount = (editor): void => {\n    // console.log('editorDidMount', editor, editor.getValue(), editor.getModel());\n    this.editor = editor;\n    editor.focus();\n  };\n}\n\nexport default EditorInput;\n","import React from 'react';\n\nimport EditorInput from '../editor-input';\nimport { FaMedal } from 'react-icons/fa';\nimport { Button, Modal } from 'react-fn-components';\n\ninterface IProps {\n  t: (key: string) => string;\n  initialCode: string;\n  answerCode: string;\n  proceed: () => void;\n  pathname: string;\n}\n\ninterface IState {\n  code: string;\n  codeForDiff: string;\n  isCorrect: boolean;\n  isAnswerVisible: boolean;\n  isModalVisible: boolean;\n  showTryAgain: boolean;\n}\n\nexport default class EditorUI extends React.Component<IProps, IState> {\n  public readonly state: IState = {\n    code: '',\n    codeForDiff: this.props.answerCode,\n    isCorrect: false,\n    isAnswerVisible: false,\n    isModalVisible: false,\n    showTryAgain: false\n  };\n\n  public componentDidMount() {\n    this.setState({ code: this.props.initialCode });\n  }\n\n  public componentWillReceiveProps(nextProps) {\n    const nextPathname = nextProps.pathname;\n    const currentPathname = this.props.pathname;\n\n    // if lesson changes, initialize state\n    if (nextPathname !== currentPathname) {\n      const newState = {\n        code: nextProps.initialCode,\n        codeForDiff: nextProps.answerCode,\n        isAnswerVisible: false,\n        isModalVisible: false,\n        isCorrect: false,\n        showTryAgain: false\n      };\n      this.initializeState(newState);\n    }\n  }\n\n  public render(): React.ReactNode {\n    const { t, answerCode } = this.props;\n    const {\n      code,\n      codeForDiff,\n      isAnswerVisible,\n      isCorrect,\n      showTryAgain,\n      isModalVisible\n    } = this.state;\n\n    return (\n      <div>\n        <div data-testid=\"lesson-complete-modal\">\n          {isModalVisible ? (\n            <Modal onClose={() => this.setState({ isModalVisible: false })}>\n              <div style={{ textAlign: 'center' }}>\n                <h3>\n                  <FaMedal /> {t('chapter.goodjob')}\n                </h3>\n                <hr />\n                <div>{t('chapter.lessonCompleteMessage')}</div>\n                <hr />\n                <div>\n                  <Button\n                    level=\"primary\"\n                    text={t('lesson.nextLesson')}\n                    onClick={this.props.proceed}\n                    type=\"button\"\n                    size=\"small\"\n                  />\n                </div>\n              </div>\n            </Modal>\n          ) : null}\n        </div>\n\n        <EditorInput\n          code={code}\n          answerCode={isCorrect ? code : answerCode}\n          codeForDiff={codeForDiff}\n          checkAnswer={this.checkAnswer}\n          showHint={this.showHint}\n          toggleShowAnswer={this.toggleShowAnswer}\n          isAnswerVisible={isAnswerVisible}\n          showTryAgain={showTryAgain}\n          t={t}\n        />\n      </div>\n    );\n  }\n\n  // Controls the visibility of answer code\n  public toggleShowAnswer = (code: string): void => {\n    this.setState({ isAnswerVisible: !this.state.isAnswerVisible, code });\n  };\n\n  // Updates code for hint\n  public showHint = (codeForDiff: string, cb): void => {\n    this.setState({ code: codeForDiff, codeForDiff }, cb);\n  };\n\n  // Checks the code written by user if it's correct\n  public checkAnswer = (code: string): void => {\n    const { answerCode } = this.props;\n    const isCorrect = this.compareAnswer(code, answerCode);\n    const newState = {\n      code,\n      codeForDiff: code\n    };\n\n    if (isCorrect) {\n      this.setState({\n        isModalVisible: true,\n        isCorrect: true,\n        showTryAgain: false,\n        ...newState\n      });\n    } else {\n      const cb = () => setTimeout(() => this.setState({ showTryAgain: false }), 1000);\n      this.setState(\n        {\n          showTryAgain: true,\n          ...newState\n        },\n        cb\n      );\n    }\n  };\n\n  private initializeState = (newState): void => {\n    // scroll to top\n    const scrollToTop = () => window.scrollTo(0, 0);\n    this.setState(newState, scrollToTop);\n  };\n\n  // Compares code written by user and the answer\n  private compareAnswer = (submitted: string, answer: string): boolean => {\n    // TODO: Need a Scilla code fomatter to do better\n    const isCorrect = this.formatCode(submitted) === this.formatCode(answer);\n    return isCorrect;\n  };\n\n  private formatCode = (code: string): string => {\n    return code\n      .split('\\n')\n      .map((line) => {\n        let lineStr: string = line;\n        if (lineStr.includes('(*') && lineStr.includes('*)')) {\n          const former = lineStr.slice(0, lineStr.lastIndexOf('(*'));\n          const latter = lineStr.slice(lineStr.lastIndexOf('*)') + 2, lineStr.length);\n          lineStr = former + latter;\n        }\n        return lineStr.replace(/\\s\\s+/g, ' ').trim();\n      })\n      .join('\\n')\n      .replace(/\\r?\\n|\\r/g, ' ')\n      .replace(/\\s\\s+/g, ' ')\n      .trim();\n  };\n}\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport MonacoEditor from 'react-monaco-editor';\nimport { language, configuration } from '../../scilla';\nimport './style.css';\n\ninterface IProps {\n  instruction: string;\n}\n\nclass InstructionViewer extends React.Component<IProps> {\n  public editor;\n  private myRef = React.createRef<HTMLDivElement>();\n  public componentWillReceiveProps(nextProps) {\n    const node = this.myRef.current;\n    if (node) {\n      node.scrollTop = 0;\n    }\n  }\n\n  public render() {\n    return (\n      <div ref={this.myRef} className=\"instruction-viewer-container\">\n        <ReactMarkdown source={this.props.instruction} renderers={{ code: this.renderCode }} />\n      </div>\n    );\n  }\n\n  private editorWillMount = (monaco) => {\n    this.editor = monaco;\n    if (!monaco.languages.getLanguages().some(({ id }) => id === 'scilla')) {\n      // Register a new language\n      monaco.languages.register({ id: 'scilla' });\n      // Register a tokens provider for the language\n      monaco.languages.setMonarchTokensProvider('scilla', language);\n      // Set the editing configuration for the language\n      monaco.languages.setLanguageConfiguration('scilla', configuration);\n    }\n  };\n\n  private renderCode = (props) => {\n    const options: any = {\n      readOnly: true,\n      lineNumbers: 'off',\n      overviewRulerBorder: false,\n      hideCursorInOverviewRuler: true,\n      occurrencesHighlight: false,\n      scrollBeyondLastLine: false,\n      minimap: {\n        enabled: false\n      }\n    };\n\n    // This className decide code visibility\n\n    return (\n      <div className=\"instruction-code-block\">\n        <MonacoEditor\n          height={props.value.split('\\n').length * 18}\n          language=\"scilla\"\n          value={props.value}\n          options={options}\n          editorWillMount={this.editorWillMount}\n        />\n      </div>\n    );\n  };\n}\nexport default InstructionViewer;\n","import React from 'react';\nimport { FaArrowLeft, FaArrowRight } from 'react-icons/fa';\nimport { Button } from 'react-fn-components';\n\ninterface IProps {\n  t: (key: string) => string;\n  goNext: () => void;\n  goBack: () => void;\n  lessonNumber: number;\n  total: number;\n}\n\nconst LessonNavigator: React.SFC<IProps> = (props) => {\n  const { t, goNext, goBack, lessonNumber, total } = props;\n\n  const isBackButtonDisabled = lessonNumber <= 1;\n  const isProceedButtonDisabled = lessonNumber >= total;\n\n  return (\n    <div role=\"group\" className=\"btn-group\" data-testid=\"lesson-navigator\">\n      <Button\n        level=\"secondary\"\n        size=\"small\"\n        text={t('lesson.back')}\n        onClick={goBack}\n        disabled={isBackButtonDisabled}\n        before={<FaArrowLeft />}\n        type=\"button\"\n      />\n\n      <Button\n        level=\"secondary\"\n        size=\"small\"\n        text={t('lesson.skip')}\n        onClick={goNext}\n        disabled={isProceedButtonDisabled}\n        after={<FaArrowRight />}\n        type=\"button\"\n      />\n    </div>\n  );\n};\n\nexport default LessonNavigator;\n","import React, { useState } from 'react';\nimport { Button, Modal } from 'react-fn-components';\nimport { FaCode } from 'react-icons/fa';\nimport './style.css';\n\nconst CheatSheetModal = ({ t }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <span data-testid=\"cheat-sheet-modal\">\n      <Button\n        onClick={() => setIsOpen(true)}\n        level=\"secondary\"\n        data-testid=\"toggle\"\n        size=\"small\"\n        text={t('lesson.cheatSheet')}\n        before={<FaCode />}\n        type=\"button\"\n      />\n      {isOpen ? (\n        <Modal onClose={() => setIsOpen(false)}>\n          <h3>{t('lesson.cheatSheet')}</h3>\n          <hr />\n          <div className=\"cheat-sheet-table\" style={{ padding: '2rem 0' }}>\n            <table className=\"table table-hover table-fixed\">\n              <thead>\n                <tr>\n                  <th style={{ minWidth: 130 }}>Field Type</th>\n                  <th style={{ minWidth: 250 }}>\n                    Field Type Keyword <br />\n                    (Case Sensitive)\n                  </th>\n                  <th style={{ minWidth: 400 }}>\n                    Mutable var declaration <br />\n                    with Null value\n                  </th>\n                  <th style={{ minWidth: 250 }}>\n                    Mutable var declaration <br />\n                    with value\n                  </th>\n                  <th style={{ minWidth: 250 }}>Declaration as a variable in transition</th>\n                  <th style={{ minWidth: 250 }}>Declaration in the library</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th scope=\"row\">\n                    <a\n                      href={'https://gist.github.com/saibakatar/8310754a24f6ca79535e14340516435b'}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      aria-label={'Signed Integer'}\n                    >\n                      Signed Integer\n                    </a>\n                  </th>\n                  <td>\n                    IntX\n                    <br />\n                    (Where X can be 32, 64, 128, or 256) eg. Int32\n                  </td>\n                  <td>{'field a: Option Int32 = None {Int32}'}</td>\n                  <td>{'field a: Int32 = Int32 5'}</td>\n                  <td>{'a = Int32 5'}</td>\n                  <td>{'let a= Int32 5'}</td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">\n                    <a\n                      href={'https://gist.github.com/saibakatar/3a3959eca79709762ff286d5f9c2913e'}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      aria-label={'Unsigned Integer'}\n                    >\n                      Unsigned Integer\n                    </a>\n                  </th>\n                  <td>\n                    UintX\n                    <br />\n                    (Where X can be 32, 64, 128, or 256) eg. Uint32\n                  </td>\n                  <td>{'field a: Option Uint32 = None {Uint32}'}</td>\n                  <td>{'field a : Uint32 = Uint32 5'}</td>\n                  <td>{'a = Uint32 5'}</td>\n                  <td>{'let a = Uint32 5'}</td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">\n                    <a\n                      href={'https://gist.github.com/saibakatar/8310754a24f6ca79535e14340516435b'}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      aria-label={'String'}\n                    >\n                      String\n                    </a>\n                  </th>\n                  <td>{'String'}</td>\n                  <td>{'field a : String = \"\"'}</td>\n                  <td>{'field a : String = \"hello\"'}</td>\n                  <td>{'a = \"hello\"'}</td>\n                  <td>{'let a = \"xyz\"'}</td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">\n                    <a\n                      href={'https://gist.github.com/saibakatar/436c75df6da75c694245e70a23d4785b'}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      aria-label={'Hash'}\n                    >\n                      Hash\n                    </a>\n                  </th>\n                  <td>ByStr32</td>\n                  <td>{'field a: Option ByStr32 = None {ByStr32}'}</td>\n                  <td>{'field a: ByStr32 = 0x1234...0abff'}</td>\n                  <td>{'a = 0x1234...0abff'}</td>\n                  <td>{'let a = 0x1234...0abff'}</td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">\n                    <a\n                      href={'https://gist.github.com/saibakatar/2dd3a8f3d048fa9ee5a70204129f7a49'}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      aria-label={'Address'}\n                    >\n                      Address\n                    </a>\n                  </th>\n                  <td>ByStr20</td>\n                  <td>{'field a: Option ByStr20 = None {ByStr20}'}</td>\n                  <td>{'field a: ByStr20 = 0x1234...0abff'}</td>\n                  <td>{'a =0x1234...0abff'}</td>\n                  <td>{'let a = 0x1234...0abff'}</td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">\n                    <a\n                      href={'https://gist.github.com/saibakatar/969321353d4b6116b5ccb04233e460c3'}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      aria-label={'Block Number'}\n                    >\n                      Block Number\n                    </a>\n                  </th>\n                  <td>BNum</td>\n                  <td>{' field a: Option BNum = None {BNum}'}</td>\n                  <td>{'field a : BNum = BNum 5'}</td>\n                  <td>{'a = BNum 5'}</td>\n                  <td>{'let a = BNum 5'}</td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">\n                    <a\n                      href={'https://gist.github.com/saibakatar/77781635267fd5191cc564ae20e38e28'}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      aria-label={'Boolean'}\n                    >\n                      Boolean\n                    </a>\n                  </th>\n                  <td>Bool</td>\n                  <td>{'field a : Option Bool = None {Bool}'}</td>\n                  <td>{'field a : Bool = True'}</td>\n                  <td>{'a = True'}</td>\n                  <td>{'let a = True'}</td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">\n                    <a\n                      href={'https://gist.github.com/saibakatar/daf7d07f210b288f6495a9e8cbc28803'}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      aria-label={'List'}\n                    >\n                      List\n                    </a>\n                  </th>\n                  <td>List</td>\n                  <td>{'field a: List(Int32)= Nil {Int32}'}</td>\n                  <td>\n                    field a: List(Int32) = let b = Nil {`{Int32}`} in\n                    <br />\n                    &nbsp;&nbsp;&nbsp;&nbsp; let c = Int32 5 in\n                    <br />\n                    &nbsp;&nbsp;&nbsp;&nbsp; Cons {`{Int32}`} c b\n                  </td>\n                  <td>{'a = Nil {Int32}'}</td>\n                  <td>{'let a = Nil {Int32}'}</td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">\n                    <a\n                      href={'https://gist.github.com/saibakatar/709b8d33ecc83bc8d205a7821d85601e'}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      aria-label={'Pair'}\n                    >\n                      Pair\n                    </a>\n                  </th>\n                  <td>Pair (FieldType1) (Fieldtype2)</td>\n                  <td>\n                    field a: Pair (String) (Option Uint32) =<br /> &nbsp;&nbsp;&nbsp;&nbsp; let b=\n                    \"\" in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; let c = None {`{Uint32}`} in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; Pair {`{(String) (Option Uint32)}`} b c\n                  </td>\n                  <td>\n                    field a: Pair (String) (Uint32) =<br /> &nbsp;&nbsp;&nbsp;&nbsp; let b= \"Hello\"\n                    in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; let c = {`{Uint32}`} 5 in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; Pair {`{(String) (Uint32)}`} b c\n                  </td>\n                  <td>\n                    a = let b= \"Hello\" in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; let c = {`{Uint32}`} 5 in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; Pair {`{(String) (Uint32)}`} b c\n                  </td>\n                  <td>\n                    let a = let b= \"Hello\" in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; let c = {`{Uint32}`} 5 in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; Pair {`{(String) (Uint32)}`} b c\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">\n                    <a\n                      href={'https://gist.github.com/saibakatar/86790f002a696e453f93ed625371ebdc'}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      aria-label={'Map'}\n                    >\n                      Map\n                    </a>\n                  </th>\n                  <td>\n                    Map FieldType1(Key) FieldType2(Value).\n                    <br />\n                    <br /> Keys can have the following types: <br />\n                    <ul>\n                      <li>IntX</li>\n                      <li>UintX</li>\n                      <li>String</li>\n                      <li>ByStr32</li>\n                      <li>ByStr20</li>\n                    </ul>\n                    Values can be of any type.\n                  </td>\n                  <td>{'field a: Map FieldType1 FieldType2 = Emp FieldType1 FieldType2'}</td>\n                  <td>\n                    field a: Map ByStr20 String = let b = Emp ByStr20 String in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; let c = 0x1234...0abff in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; let d = \"\"Hello\"\" in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; builtin put b c d \"\n                  </td>\n                  <td>\n                    a = let b = Emp ByStr20 String in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; let c = 0x1234...0abff in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; let d = \"\"Hello\"\" in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; builtin put b c d \"\n                  </td>\n                  <td>\n                    let a = let b = Emp ByStr20 String in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; let c = 0x1234...0abff in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; let d = \"\"Hello\"\" in\n                    <br /> &nbsp;&nbsp;&nbsp;&nbsp; builtin put b c d \"\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </Modal>\n      ) : null}\n    </span>\n  );\n};\n\nexport default CheatSheetModal;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withNamespaces } from 'react-i18next';\nimport { Helmet } from 'react-helmet';\nimport Header from '../../components/header';\nimport Footer from '../../components/footer';\nimport { setCh1Progress } from '../../redux/persist/index';\nimport * as H from 'history';\nimport ChapterCompleteCard from '../../components/chapter-complete-card';\nimport LessonProgressbar from '../../components/lesson-progressbar';\nimport Editor from '../../components/editor';\nimport InstructionViewer from '../../components/instruction-viewer';\nimport LessonNavigator from '../../components/lesson-navigator';\nimport { IMatch, CourseCodeType, CourseInstructionType } from '../../typings';\nimport CheatSheetModal from '../../components/cheat-sheet-modal';\n\ninterface IProps {\n  setCh1Progress: (progress: number[]) => void;\n  ch1Progress: number[];\n  i18n: {\n    language: string;\n    changeLanguage: (lang: string) => void;\n  };\n  t: (key: string) => string;\n  history: H.History;\n  location: H.Location;\n  match: IMatch;\n  instructions: CourseInstructionType;\n  codes: CourseCodeType;\n  profile: any;\n}\ninterface IState {\n  code: string;\n  codeForDiff: string;\n  showAnswer: boolean;\n}\n\nclass LessonContainer extends React.Component<IProps, IState> {\n  public render(): React.ReactNode {\n    const { codes, location, t } = this.props;\n\n    const chapterNumber: number = this.getChapterNumber();\n    const chapterIndex: number = chapterNumber - 1;\n    const lessonNumber: number = this.getChatperNumber();\n    const lessonIndex: number = lessonNumber - 1;\n    const instruction = this.getInstruction();\n\n    const codeLessonList = codes[chapterIndex] || [];\n\n    const numOfTotalChapter: number = codes.length;\n\n    const numOfTotalLesson: number = codeLessonList.length || 0;\n\n    // Check if the current lesson is the end of this chapter.\n    const isLastLesson: boolean = lessonNumber === numOfTotalLesson;\n\n    const code = codeLessonList[lessonIndex] || { initialCode: undefined, answerCode: undefined };\n    const { initialCode, answerCode } = code;\n\n    const currentChapterText = `${t('chapter.chapter')} ${chapterNumber}`;\n    const currentLessonText = `${t('lesson.lesson')} ${lessonNumber}`;\n    const documentTitle: string = `NeoPepes - ${currentChapterText} ${currentLessonText}`;\n\n    const { pathname } = location;\n    return (\n      <div>\n        <Header {...this.props} />\n        <Helmet>\n          <title>{documentTitle}</title>\n        </Helmet>\n        <div className=\"container\">\n          <LessonProgressbar\n            navigate={this.navigate}\n            chapterNumber={chapterNumber}\n            lessonNumber={lessonNumber}\n            total={numOfTotalLesson}\n            t={t}\n          />\n          <div className=\"py-2\" />\n\n          <div className=\"row\">\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-6\">\n              <InstructionViewer instruction={instruction} />\n            </div>\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-6\">\n              {isLastLesson ? (\n                <ChapterCompleteCard\n                  navigate={this.navigate}\n                  t={t}\n                  total={numOfTotalChapter}\n                  chapter={chapterNumber}\n                />\n              ) : (\n                <Editor\n                  initialCode={initialCode}\n                  answerCode={answerCode}\n                  t={t}\n                  proceed={this.goNext}\n                  pathname={pathname}\n                />\n              )}\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"d-flex py-2 justify-content-between\">\n              <CheatSheetModal t={t} />\n              <LessonNavigator\n                goBack={this.goBack}\n                goNext={this.goNext}\n                lessonNumber={lessonNumber}\n                total={numOfTotalLesson}\n                t={t}\n              />\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  public goNext = (): void => {\n    const { codes } = this.props;\n    // Check if code is undefined\n    if (codes === undefined) {\n      return;\n    }\n    const chapterNumber: number = this.getChapterNumber();\n    const lessonNumber: number = this.getChatperNumber();\n\n    this.updateProgress(chapterNumber, lessonNumber);\n    this.navigateToNextLesson(chapterNumber, lessonNumber);\n  };\n\n  private goBack = (): void => {\n    const { history } = this.props;\n    const chapterNumber: number = this.getChapterNumber();\n    const lessonNumber: number = this.getChatperNumber();\n    const previousLessonPath = `/chapter/${chapterNumber}/lesson/${lessonNumber - 1}`;\n    history.push(previousLessonPath);\n  };\n\n  private updateProgress = (currentChapter: number, currentLesson: number) => {\n    const { ch1Progress } = this.props;\n\n    ch1Progress[currentChapter - 1] = currentLesson;\n    let newCh1Progress = ch1Progress;\n    this.props.setCh1Progress(newCh1Progress);\n  };\n\n  private navigateToNextLesson = (currentChapter: number, currentLesson: number) => {\n    const { codes } = this.props;\n\n    // Check if code is undefined\n    if (codes === undefined) {\n      return;\n    }\n\n    this.navigate(currentChapter, currentLesson + 1);\n  };\n\n  private navigate = (chapterNum, lessonNum) => {\n    const { history } = this.props;\n\n    history.push(`/chapter/${chapterNum}/lesson/${lessonNum}`);\n  };\n\n  private getInstruction = () => {\n    const { instructions, i18n } = this.props;\n    const lang: string = i18n.language;\n\n    const chapterNumber = this.getChapterNumber();\n    const chapterIndex = chapterNumber - 1;\n    const lessonNumber = this.getChatperNumber();\n    const lessonIndex = lessonNumber - 1;\n\n    const intructionsLocalized = instructions[lang];\n    const chapter = intructionsLocalized[chapterIndex] || {};\n\n    const instructionLessonList = chapter.lessons || [];\n    const instruction = instructionLessonList[lessonIndex] || {};\n\n    return instruction;\n  };\n\n  private getChapterNumber = (): number => {\n    const { match } = this.props;\n    const routeParams = match.params;\n    return parseInt(routeParams.chapter, 10);\n  };\n\n  private getChatperNumber = (): number => {\n    const { match } = this.props;\n    const routeParams = match.params;\n    return parseInt(routeParams.lesson, 10);\n  };\n}\n\n// @ts-ignore\nconst WithTranslation = withNamespaces()(LessonContainer);\n// @ts-check\nconst mapStateToProps = (state) => ({\n  instructions: state.course.courseInstructions,\n  codes: state.course.courseCodes,\n  ch1Progress: state.persist.ch1Progress\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setCh1Progress: (localProgress) => dispatch(setCh1Progress(localProgress))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WithTranslation);\n"],"sourceRoot":""}